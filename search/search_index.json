{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.\\_]+"},"docs":[{"location":"","text":"BigOS BigOS is an operating system developed by students at the University of Wroc\u0142aw. Dependencies (minimum version) CMake (3.24) + makefile generator qemu-system-riscv riscv64-elf-gcc clang-format (19.0) MkDocs (1.4.2) \u2013 only for documentation Building Quickstart Complete information about build system can be found in build system docs . Here is just enough to get you started. Cross-Compiling Clone and enter the repository, then run: cmake --preset=<your-preset> cmake --build To list all available presets run: cmake --list-presets # Some notable presets: # debug # release # release-size (optimize for size) # release-debug (release with debug info) Running To run the OS in QEMU use one of the targets: cmake --build build --target run-<target to run> # ex. run-example_sbi # To exit just enter Ctrl+a x All available targets are listed in build system target docs . Contributing Before contributing please familiarize yourself with the rules . Documentation Documentation is available at github pages . Offline Documentation Can be generated using MkDocs: mkdocs build # Or to serve it locally: # mkdocs serve","title":"Home"},{"location":"#bigos","text":"BigOS is an operating system developed by students at the University of Wroc\u0142aw.","title":"BigOS"},{"location":"#dependencies-minimum-version","text":"CMake (3.24) + makefile generator qemu-system-riscv riscv64-elf-gcc clang-format (19.0) MkDocs (1.4.2) \u2013 only for documentation","title":"Dependencies (minimum version)"},{"location":"#building-quickstart","text":"Complete information about build system can be found in build system docs . Here is just enough to get you started.","title":"Building Quickstart"},{"location":"#cross-compiling","text":"Clone and enter the repository, then run: cmake --preset=<your-preset> cmake --build To list all available presets run: cmake --list-presets # Some notable presets: # debug # release # release-size (optimize for size) # release-debug (release with debug info)","title":"Cross-Compiling"},{"location":"#running","text":"To run the OS in QEMU use one of the targets: cmake --build build --target run-<target to run> # ex. run-example_sbi # To exit just enter Ctrl+a x All available targets are listed in build system target docs .","title":"Running"},{"location":"#contributing","text":"Before contributing please familiarize yourself with the rules .","title":"Contributing"},{"location":"#documentation","text":"Documentation is available at github pages .","title":"Documentation"},{"location":"#offline-documentation","text":"Can be generated using MkDocs: mkdocs build # Or to serve it locally: # mkdocs serve","title":"Offline Documentation"},{"location":"about/","text":"About Page // TODO: Fill in this page.","title":"About"},{"location":"about/#about-page","text":"// TODO: Fill in this page.","title":"About Page"},{"location":"acronyms/","text":"A Arg - Argument ASCII - American Standard Code for Information Interchange B BIOS - Basic input/output system C CLI - Command Line Interface CPU - Central processing unit E ELF - Executable and Linkable Format EOF - End of File Exec - Execute EXT - Extended File System (ext2, ext3, ext4) F f32 - single-precision, 32-bit IEEE 754 floating-point representation f64 - double-precision, 64-bit IEEE 754 floating-point representation FAT - File Allocation Table G GUI - Graphical User Interface I i16 - 16-bit signed integer i32 - 32-bit signed integer i64 - 64-bit signed integer i8 - 8-bit signed integer Inx - Index M Max - Maximum Min - Minimum Msg - Message N Num - Number O Opt - Option OS - Operating system P PID - Process Identifier Pos - Position Ptr - Pointer U u16 - 16-bit unsigned integer u32 - 32-bit unsigned integer u64 - 64-bit unsigned integer u8 - 8-bit unsigned integer UEFI - Unified Extensible Firmware Interface uefi - Unified Extensible Firmware Interface V Val - Value VFS - Virtual File System","title":"Acronyms"},{"location":"acronyms/#a","text":"Arg - Argument ASCII - American Standard Code for Information Interchange","title":"A"},{"location":"acronyms/#b","text":"BIOS - Basic input/output system","title":"B"},{"location":"acronyms/#c","text":"CLI - Command Line Interface CPU - Central processing unit","title":"C"},{"location":"acronyms/#e","text":"ELF - Executable and Linkable Format EOF - End of File Exec - Execute EXT - Extended File System (ext2, ext3, ext4)","title":"E"},{"location":"acronyms/#f","text":"f32 - single-precision, 32-bit IEEE 754 floating-point representation f64 - double-precision, 64-bit IEEE 754 floating-point representation FAT - File Allocation Table","title":"F"},{"location":"acronyms/#g","text":"GUI - Graphical User Interface","title":"G"},{"location":"acronyms/#i","text":"i16 - 16-bit signed integer i32 - 32-bit signed integer i64 - 64-bit signed integer i8 - 8-bit signed integer Inx - Index","title":"I"},{"location":"acronyms/#m","text":"Max - Maximum Min - Minimum Msg - Message","title":"M"},{"location":"acronyms/#n","text":"Num - Number","title":"N"},{"location":"acronyms/#o","text":"Opt - Option OS - Operating system","title":"O"},{"location":"acronyms/#p","text":"PID - Process Identifier Pos - Position Ptr - Pointer","title":"P"},{"location":"acronyms/#u","text":"u16 - 16-bit unsigned integer u32 - 32-bit unsigned integer u64 - 64-bit unsigned integer u8 - 8-bit unsigned integer UEFI - Unified Extensible Firmware Interface uefi - Unified Extensible Firmware Interface","title":"U"},{"location":"acronyms/#v","text":"Val - Value VFS - Virtual File System","title":"V"},{"location":"contributing_rules/","text":"Contributing rules Languages To keep things simple the only allowed language is C23 and assembly where needed. License All source files should start with the following license header: <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Formatting Ensure your code is properly formatted before submitting a pull request (use scripts/format.sh ). Naming conventions Use snake_case for names (including file names). Use _t at the end of typedef definitions. Use ALL_CAPS for MACROS. Use ALL_CAPS for enum values and include the name of the enum at the beginning of the value name. Prefix global variables with g_ . Naming rules Don't use magic numbers, use #define or const variables to name them (within reason). Don't use acronyms others then the ones specified here . Comments If using comment labels please write them like this: //TODO: //NOTE: //WARNING: //BUG: //PERF: \u2013 for marking code that needs optimization //FIX: \u2013 for marking code that needs fixing //HACK: \u2013 for marking a temporary solution that needs redoing //TEST: \u2013 for marking code used for testing Use Doxygen-style comments for functions and structs. Update comments when modifying code! The colon after labeled comments is important for TODO -searching scripts Git No Warnings, TODOs, Bugs, Fixes, Hacks and Tests on the main branch. Keep the Git history clean. Write meaningful commit messages. All code must be reviewed before merging. Use pull requests, no direct pushes to main. Code must pass all checks before merging. Code must be tested before merging. At least 2 approvals required before merging.","title":"Contributing rules"},{"location":"contributing_rules/#contributing-rules","text":"","title":"Contributing rules"},{"location":"contributing_rules/#languages","text":"To keep things simple the only allowed language is C23 and assembly where needed.","title":"Languages"},{"location":"contributing_rules/#license","text":"All source files should start with the following license header: <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.","title":"License"},{"location":"contributing_rules/#formatting","text":"Ensure your code is properly formatted before submitting a pull request (use scripts/format.sh ).","title":"Formatting"},{"location":"contributing_rules/#naming-conventions","text":"Use snake_case for names (including file names). Use _t at the end of typedef definitions. Use ALL_CAPS for MACROS. Use ALL_CAPS for enum values and include the name of the enum at the beginning of the value name. Prefix global variables with g_ .","title":"Naming conventions"},{"location":"contributing_rules/#naming-rules","text":"Don't use magic numbers, use #define or const variables to name them (within reason). Don't use acronyms others then the ones specified here .","title":"Naming rules"},{"location":"contributing_rules/#comments","text":"If using comment labels please write them like this: //TODO: //NOTE: //WARNING: //BUG: //PERF: \u2013 for marking code that needs optimization //FIX: \u2013 for marking code that needs fixing //HACK: \u2013 for marking a temporary solution that needs redoing //TEST: \u2013 for marking code used for testing Use Doxygen-style comments for functions and structs. Update comments when modifying code! The colon after labeled comments is important for TODO -searching scripts","title":"Comments"},{"location":"contributing_rules/#git","text":"No Warnings, TODOs, Bugs, Fixes, Hacks and Tests on the main branch. Keep the Git history clean. Write meaningful commit messages. All code must be reviewed before merging. Use pull requests, no direct pushes to main. Code must pass all checks before merging. Code must be tested before merging. At least 2 approvals required before merging.","title":"Git"},{"location":"build_system/","text":"Build System It's cmake. // TODO: Document the file system","title":"Build System"},{"location":"build_system/#build-system","text":"It's cmake. // TODO: Document the file system","title":"Build System"},{"location":"build_system/targets/","text":"Run Targets run-example_sbi run-example_machine // TODO: Fill in information about run targets","title":"Run Targets"},{"location":"build_system/targets/#run-targets","text":"run-example_sbi run-example_machine // TODO: Fill in information about run targets","title":"Run Targets"}]}